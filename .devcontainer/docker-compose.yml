version: "3.9"

services:
  dev:
    build:
      context: ../
      dockerfile: .devcontainer/Dockerfile
    volumes:
      - ../:/workspace:cached
    command: sleep infinity
    ports:
      - "3000:3000" # Webapp (React/Vite)
      - "3001:3001" # API (NestJS)
      - "6006:6006" # Storybook
    env_file:
      - ../.env
    depends_on:
      dev-database:
        condition: service_healthy
      dev-redis:
        condition: service_started
      mailslurper:
        condition: service_started

  dev-redis:
    container_name: dev-redis
    image: redis:7.0.9-alpine
    ports:
      - "${DEV_REDIS_PORT}:6379"
    volumes:
      - dev-redis:/data

  tests-redis:
    container_name: tests-redis
    build:
      context: ./
      dockerfile: tests-redis.Dockerfile
    ports:
      - "${TEST_REDIS_PORT:-6380}:6379"
    volumes:
      - dev-redis:/data

  mailslurper:
    container_name: mailslurper
    image: marcopas/docker-mailslurper
    ports:
      - "2500:2500"
      - "9000:8080"
      - "8085:8085"

  tests-database:
    build:
      context: ./
      dockerfile: tests-database.Dockerfile
    restart: always
    container_name: tests-database
    ports:
      - "${TEST_POSTGRES_PORT:-5433}:5432"
    environment:
      - POSTGRES_USER=${TEST_POSTGRES_USER}
      - POSTGRES_PASSWORD=${TEST_POSTGRES_PASSWORD}
      - POSTGRES_DB=${TEST_POSTGRES_DB}

  dev-database:
    container_name: dev-database
    image: postgres:17.4-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=dev_user
      - POSTGRES_PASSWORD=dev_password
      - POSTGRES_DB=funds_tracker_dev
    ports:
      - "${DEV_POSTGRES_PORT}:5432"
    volumes:
      - dev-database:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DEV_POSTGRES_USER}", "-d", "${DEV_POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  dev-database:
    driver: local
  dev-redis:
    driver: local
