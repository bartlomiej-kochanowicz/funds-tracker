generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  uuid                 String       @id @default(uuid())
  createdAt            DateTime     @default(now())
  email                String       @unique
  name                 String
  password             String
  confirmationCodeHash String?      @unique
  sessions             Session[]
  wallets              Wallet[]
  subscription         Subscription @default(FREE)
}

model Session {
  name      String
  rtHash    String   @unique
  updatedAt DateTime @default(now())
  user      User     @relation(references: [uuid], fields: [userUuid])
  userUuid  String
}

model Wallet {
  uuid         String        @id @default(uuid())
  name         String
  user         User          @relation(fields: [userUuid], references: [uuid])
  userUuid     String
  securities   Security[]
  cashHoldings CashHolding[]
  hardAssets   HardAsset[]
}

model Security {
  uuid              String             @id @default(uuid())
  symbol            String
  stockExchange     String?
  exchangeShortName String?
  name              String
  currency          String?
  activities        SecurityActivity[]
  Wallet            Wallet             @relation(fields: [walletUuid], references: [uuid])
  walletUuid        String
}

model SecurityActivity {
  uuid         String               @id @default(uuid())
  date         DateTime
  activityType SecurityActivityType
  quantity     Float
  price        Int
  fee          Int
  Security     Security?            @relation(fields: [securityUuid], references: [uuid])
  securityUuid String?
}

model CashHolding {
  uuid       String                @id @default(uuid())
  name       String
  currency   String
  activities CashHoldingActivity[]
  Wallet     Wallet                @relation(fields: [walletUuid], references: [uuid])
  walletUuid String
}

model CashHoldingActivity {
  uuid            String                  @id @default(uuid())
  date            DateTime
  activityType    CashHoldingActivityType
  amount          Int
  fee             Int
  CashHolding     CashHolding             @relation(fields: [cashHoldingUuid], references: [uuid])
  cashHoldingUuid String
}

model HardAsset {
  uuid       String              @id @default(uuid())
  name       String
  currency   String
  activities HardAssetActivity[]
  Wallet     Wallet              @relation(fields: [walletUuid], references: [uuid])
  walletUuid String
}

model HardAssetActivity {
  uuid          String    @id @default(uuid())
  date          DateTime
  type          String
  amount        Int
  fee           Int
  HardAsset     HardAsset @relation(fields: [hardAssetUuid], references: [uuid])
  hardAssetUuid String
}

enum Subscription {
  FREE
  LITE
  EXPERT
}

enum SecurityActivityType {
  purchase
  sale
}

enum CashHoldingActivityType {
  deposit
  payout
  interest
}
