# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ConfirmSignUp {
  success: Boolean!
}

type Email {
  exist: Boolean!
}

type Logout {
  success: Boolean!
}

type Refresh {
  success: Boolean!
}

type ResetPassword {
  success: Boolean!
}

type SendCode {
  success: Boolean!
}

type SetNewPassword {
  success: Boolean!
}

type SignInLocal {
  success: Boolean!
}

type SignUpLocal {
  success: Boolean!
}

type User {
  uuid: ID!
  createdAt: Date!
  email: EmailAddress!
  name: String!
  subscription: Subscription!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address")

"""The subscription status of the user"""
enum Subscription {
  FREE
  LITE
  EXPERT
}

type Wallet {
  uuid: ID!
  name: String!
}

type Query {
  emailExist(data: EmailInput!): Email!
  user: User!
  wallets: [Wallet!]!
  wallet(uuid: String!): Wallet!
}

input EmailInput {
  email: EmailAddress!
  token: String!
}

type Mutation {
  signUpLocal(data: SignUpInput!): SignUpLocal!
  confirmSignUp(data: ConfirmSignUpInput!): ConfirmSignUp!
  sendCode(data: SendCodeInput!): SendCode!
  signInLocal(data: SignInInput!): SignInLocal!
  logout: Logout!
  resetPassword(data: ResetPasswordInput!): ResetPassword!
  setNewPassword(data: SetNewPasswordInput!): SetNewPassword!
  refreshToken: Refresh!
  updateUser(data: UpdateUserInput!): User!
  createWallet(createWalletInput: CreateWalletInput!): Wallet!
  updateWallet(data: UpdateWalletInput!): Wallet!
  removeWallet(uuid: String!): Wallet!
}

input SignUpInput {
  email: EmailAddress!
  name: String!
  password: String!
  token: String!
}

input ConfirmSignUpInput {
  email: EmailAddress!
  code: String!
  token: String!
}

input SendCodeInput {
  email: EmailAddress!
  token: String!
}

input SignInInput {
  email: String!
  password: String!
  token: String!
}

input ResetPasswordInput {
  email: EmailAddress!
  token: String!
}

input SetNewPasswordInput {
  password: String!
  resetToken: String!
  token: String!
}

input UpdateUserInput {
  email: EmailAddress
  name: String
}

input CreateWalletInput {
  name: String!
}

input UpdateWalletInput {
  name: String!
  uuid: ID!
}